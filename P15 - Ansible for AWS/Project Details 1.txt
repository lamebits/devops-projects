1. Login to AWS and Create EC2 Instance to run ansible playbook
	1.1 Create Ec2 Instance
	1.2 Key-Pair
	1.3 Ubuntu AMI
	1.4 Security Group - MyIP-22
	1.5 #!/bin/bash
		sudo apt update
		sudo apt install ansible -y
		sudo apt install unzip curl -y
		curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unzip awscliv2.zip
		sudo ./aws/install
	1.6 ssh login "ssh -i ansible-ohio-key.pem" ubuntu@<EC2 Public IP>
2. Setup EC2 Role for Ansible
	2.1 Name: ansible-admin
	2.2 Access: Administrative Access
	2.3 Assign to EC2 instance
	2.4 in gitbash use following command in root user
		a. verify aws version using command "aws --version"
		b. "aws sts get-caller-identity"
-------------------------------------------------------------------------------------------------------------------
	2.5 mkdir vpc-stack-vprofile - in ubuntu user.
	2.6 cd vpc-stack-vprofile
	2.7 Write sample code for testing vim test-aws.yml	// Create Sample KeyPair in AWS EC2.
			- hosts: localhost
			  connection: local
			  gather_facts: False
			  tasks:
				- name: sample ec2 key
				  ec2_key:
					name: sample
				  region: us-east-2
				    register: keyout
				- debug:
					var: keyout
				-name: Store key output
					copy:
						content: {{keyout.key.private_key}}
						dest: ./sample-key.pem
					when: keyout.changed

	2.8 sudo apt search boto
	2.9 sudo apt install python3-boto -y, sudo apt install python3-boto3 -y, sudo apt install python3-botocore -y
	2.10 ansible-playbook test-was.yml
	2.11 rm -rf *
---------------------------------------------------------------------------------------------------------------------
3. Create git repo "ansible-aws-vpc" and clone it into local directory.
	3.1 Create both file in vars folder 
		vpc_setup.txt
		
		vpc_name: "Vprofile-vpc"

		# VPC Range
		vpcCidr: '172.20.0.0/16'

		# Subnet Range
		PubSub1Cidr: 172.20.1.0/24
		PubSub2Cidr: 172.20.2.0/24
		PubSub3Cidr: 172.20.3.0/24
		PrivSub1Cidr: 172.20.4.0/24
		PrivSub2Cidr: 172.20.5.0/24
		PrivSub3Cidr: 172.20.6.0/24

		# Region Name
		region: 'us-east-2'

		# Zone Name
		zone1: 'us-east-2a'
		zone2: 'us-east-2b'
		zone3: 'us-east-2c'

		state: present
		
	3.2 bastion_setup.txt
	
		bastion_ami: ami-0eb070c40e6a142a3
		region: us-east-2
		MYIP: 106.219.90.224/32
		
	3.3 git commit " git clone https://github.com/lamebits/ansible-aws-vpc.git" 
		and clone it into Ansible Machine EC2 ssh login in gitbash.

	3.4 vpc_setup.yml Playbook
	
		- hosts: localhost
		  connection: local
		  gather_facts: False
		  tasks:
			- name: Import VPC Variables
			  include_vars: 
				file: vars/vpc_setup.txt

			- name: Create Vprofile VPC
			  ec2_vpc_net:
				name: "{{ vpc_name }}"
				cidr_block: "{{ vpcCidr }}"
				region: "{{ region }}"
				tenancy: default
				dns_support: yes
				dns_hostnames: yes
				state: "{{ state }}"
			  register: vpcout

			#- debug:
			#    var: vpcout

			- name: Create Public Subnet 1 in Zone 1
			  ec2_vpc_subnet:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				az: "{{ zone1 }}"
				state: "{{ state }}"
				map_public: yes
				cidr: "{{ PubSub1Cidr }}"
				resource_tags:
				  Name: vprofile-pubsub1
			  register: pubsub1_out

			#- debug:
			#    var: pubsub1_out

			- name: Create Public Subnet 2 in Zone 2
			  ec2_vpc_subnet:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				az: "{{ zone2 }}"
				state: "{{ state }}"
				map_public: yes
				cidr: "{{ PubSub2Cidr }}"
				resource_tags:
				  Name: vprofile-pubsub2
			  register: pubsub2_out

			- name: Create Public Subnet 3 in Zone 3
			  ec2_vpc_subnet:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				az: "{{ zone3 }}"
				state: "{{ state }}"
				map_public: yes
				cidr: "{{ PubSub3Cidr }}"
				resource_tags:
				  Name: vprofile-pubsub3
			  register: pubsub3_out

			- name: Create Private Subnet 1 in Zone 1
			  ec2_vpc_subnet:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				az: "{{ zone1 }}"
				state: "{{ state }}"
				map_public: yes
				cidr: "{{ PrivSub1Cidr }}"
				resource_tags:
				  Name: vprofile-privsub1
			  register: privsub1_out

			- name: Create Private Subnet 2 in Zone 2
			  ec2_vpc_subnet:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				az: "{{ zone2 }}"
				state: "{{ state }}"
				map_public: yes
				cidr: "{{ PrivSub2Cidr }}"
				resource_tags:
				  Name: vprofile-privsub2
			  register: privsub2_out

			- name: Create Private Subnet 3 in Zone 3
			  ec2_vpc_subnet:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				az: "{{ zone3 }}"
				state: "{{ state }}"
				map_public: yes
				cidr: "{{ PrivSub3Cidr }}"
				resource_tags:
				  Name: vprofile-privsub3
			  register: privsub3_out

			- name: Internet Gateway Setup
			  ec2_vpc_igw:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				state: "{{ state }}"
				resource_tags:
				  Name: vprofile-IGW
			  register: igw_out

			- name: Setup Public Subnet Route Table
			  ec2_vpc_route_table:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				tags:
				  Name: Vprofile-pubRT
				subnets:
				  - "{{ pubsub1_out.subnet.id }}"
				  - "{{ pubsub2_out.subnet.id }}"
				  - "{{ pubsub3_out.subnet.id }}"
				routes:
				  - dest: 0.0.0.0/0
					gateway_id: "{{ igw_out.gateway_id }}"  
			  register: pubRT_out

			- name: Create a new NAT gateway and allocate new EIP
			  ec2_vpc_nat_gateway:
				state: "{{ state }}"
				subnet_id: "{{ pubsub1_out.subnet.id }}"
				wait: yes
				region: "{{ region }}"
				if_exist_do_not_create:  true
			  register: NATGW_out

			- name: Setup Private Subnet Route Table
			  ec2_vpc_route_table:
				vpc_id: "{{ vpcout.vpc.id }}"
				region: "{{ region }}"
				tags:
				  Name: Vprofile-privRT
				subnets:
				  - "{{ privsub1_out.subnet.id }}"
				  - "{{ privsub2_out.subnet.id }}"
				  - "{{ privsub3_out.subnet.id }}"
				routes:
				  - dest: 0.0.0.0/0
					gateway_id: "{{ NATGW_out.nat_gateway_id }}"  
			  register: privRT_out 

			- debug:
				var: "{{ item }}"
			  loop:
				- vpcout.vpc.id
				- pubsub1_out.subnet.id
				- pubsub1_out.subnet.id
				- pubsub1_out.subnet.id
				- privsub1_out.subnet.id
				- privsub1_out.subnet.id
				- privsub1_out.subnet.id
				- igw_out.gateway_id
				- pubRT_out.route_table.id
				- NATGW_out.nat_gateway_id
				- privRT_out.route_table.id

			- set_fact:
				vpcid: "{{ vpcout.vpc.id }}"
				pubsub1id: "{{ pubsub1_out.subnet.id }}"
				pubsub2id: "{{ pubsub2_out.subnet.id }}"
				pubsub3id: "{{ pubsub3_out.subnet.id }}"
				privsub1id: "{{ privsub1_out.subnet.id }}"
				privsub2id: "{{ privsub2_out.subnet.id }}"
				privsub3id: "{{ privsub3_out.subnet.id }}"
				igwid: "{{ igw_out.gateway_id }}"
				pubRTid: "{{ pubRT_out.route_table.id }}"
				NATGWid: "{{ NATGW_out.nat_gateway_id }}"
				privRTid: "{{ privRT_out.route_table.id }}"
				cacheable: yes

			- name: Create variable file for vpc output
			  copy:
				content: "vpcid: {{ vpcout.vpc.id }}\npubsub1id: {{ pubsub1_out.subnet.id }}\npubsub2id: {{ pubsub2_out.subnet.id }}\npubsub3id: {{ pubsub3_out.subnet.id }}\nprivsub1id: {{ privsub1_out.subnet.id }}\nprivsub2id: {{ privsub2_out.subnet.id }}\nprivsub3id: {{ privsub3_out.subnet.id }}\nigwid: {{ igw_out.gateway_id }}\npubRTid: {{ pubRT_out.route_table.id }}\nNATGWid: {{ NATGW_out.nat_gateway_id }}\nprivRTid: {{ privRT_out.route_table.id }}"
				dest: vars/output_vars
 
	3.5 git, commit into github and pull into Ansible Machine EC2.

4. Write ansible code in vpc_setup.yml file	
	- Setup Public Subnet 1 for Zone 1
	- Setup Public Subnet 2 for Zone 2
	- Setup Public Subnet 3 for Zone 3
	- Setup Private Subnet 1 for Zone 1
	- Setup Private Subnet 2 for Zone 2
	- Setup Private Subnet 3 for Zone 3
	- Setup Internet Gateway
	- Setup Route Table for Public Subnets
	- Create New Nat Gateway for new EIP
	- Setup Route Table for Private Subnets
	- debug to print output in console
	- set fact: store it into variable
	- Create Variable file to store all output id into file
	
5. Push the Code from Remote to git hub and pull the code in local directory
	- git add .
	- git commit -m "vars output"
	- git config --global user.name <>
	- git config --global user.email <>
	- git push
	- Create Generate Token in Github to connect
	
6. Create EC2 Instance for Bastion Host
	6.1 Create bastion-instance.yml Playbook file
	6.2 Create Key-Pair
	6.3 Save Keyout in bastion-key.pem file
	6.4 Create security group
	6.5 Create EC2 Bastion Host Instance
		- hosts: localhost
		  connection: local
		  gather_facts: False
		  tasks:

			- name: Import Bastion Setup file
			  include_vars: 
				file: vars/bastion_setup.txt

			- name: Import Variable Output file
			  include_vars: 
				file: vars/output_vars

			- name: Create EC2 Key
			  ec2_key:
				name: vprofile-key
				region: "{{ region }}"
			  register: key_out

			- name: Store key in bastion-key.pem file
			  copy:
				content: "{{ key_out.key.private_key }}"
				dest: "./bastion-key.pem"
				mode: 0600
			  when: key_out.changed

			- name: Create Security Group for Bastion Host
			  ec2_group:
				name: Bastion-host-sg
				description: Allow port 22 from anywhere and all port within Bastion-host-sg
				region: "{{ region }}"
				vpc_id: "{{ vpcid }}"
				rules:
				  - proto: tcp
					from_port: 22
					to_port: 22
					cidr_ip: "{{ MYIP }}"
			  register: BastionSG_out

			- name: Create Bastion EC2 Instance
			  ec2_instance:
				key_name: vprofile-key
				region: "{{ region }}"
				instance_type: t2.micro
				image: 
				  id: "{{ bastion_ami }}" 
				wait: yes
				wait_timeout: 300
				tags:   
				  Name: "Bastion_Host"
				  Project: "Vprofile" 
				  Owner: DevOps Team
				exact_count: 1
				#count_tag: 
				  #Name: "Bastion_Host"
				  #Project: "Vprofile" 
				  #Owner: DevOps Team
				security_group: "{{ BastionSG_out.group_id }}"
				vpc_subnet_id: "{{ pubsub1id }}"
			  register: BastionHost_out
			
