1. Login to AWS Account
2. Create Key Pair - vprofile-ci-key.pem
3. Create Security Group
	3.1 Jenkins(jenkins-sg) - 22-MyIP, 8080-IPV4, 8080-IPV6 - 8080-sonar-sg(response back)
	3.2 Nexus(nexus-sg) - 22-MyIP, 8081-MyIP, 8081-jenkins-sg
	3.3 Sonarqube(sonar-sg) - 22-MyIP, 80-MyIP, 80-jenkins-sg
4. Create EC2 Instance with userdata
	4.1 Jenkins EC2 Instance [JenkinsServer] Ubuntu
		#!/bin/bash
		sudo apt update
		sudo apt install openjdk-17-jdk -y
		sudo apt install maven wget unzip -y

		sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
		https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
		echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
		https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
		/etc/apt/sources.list.d/jenkins.list > /dev/null

		sudo apt-get update
		sudo apt-get install jenkins -y
		4.1.1 ssh to jenkins machine "ssh -i vprofile-ci-key.pem ubuntu@18.220.114.135"
		4.1.2 cat .ssh/known_hosts: It has store the current session of password.
		4.1.3 ls /usr/lib/jvm: shows list of all java version
		4.1.4 ls /var/lib/jenkins: show jenkins files.
		4.1.5 check public IP of Jenkins in browser "http://<IP>:8080"
		4.1.6 cat path mentioned in jenkins browser page
		4.1.7 paste the paswword
		4.1.8 set configurations : http://18.220.114.135:8080/
		4.1.9 Install Plugin :
				maven Integration
				GitHub Integration
				Nexus Artifact Uploader
				SonarQube Scanner
				Slack Notification
				Build Timestamp
	4.2 Nexus EC2 Instance [NexusServer] - Centos9
		4.2.1 Ssh Login "ssh -i vprofile-ci-key.pem ec2-user@3.21.248.228"
		4.2.2 Open nexus in browser http://<IP>:8081
		4.2.3 SignIn to Nexus
			4.2.3.1 Create repository [vprofile-release] in maven2 hosted //while action the maven dependencies
			4.2.3.2 Create repository [vpro-maven-central] in maven2 proxy, url: "https://repo1.maven.org/maven2/" // store the dependencies/artifact
			4.2.3.3 Create repository [vprofile-snapshot] in maven2 hosted, version policy: snapshot
			4.2.3.4 Create repository [vpro-maven-group] add all repository
			
	4.3 Sonarqube EC2 Instance [SonarServer]- Ubuntu
		4.3.1 Login to Sonar.

5. Git
	5.1 Create github repository and migrant code
		5.1.1 SSH Login
				git config --global user.email "meenalmate1663@gmail.com"
				git config --global user.name "lamebits"
				cat ~/.gitconfig
				ssh-keygen
				cat public key 
				Copy public key
				Go to Github setting -> Ssh and GPK Keys -> Add the SSH key
				Go to "https://github.com/hkhcoder/vprofile-project" and fork into our github account.
				
	5.2  Integrate github repo with VSCode and test it

6. Build Job with Nexus Integration
	6.1 Open Jenkins -> Manage Jenkins -> Tools
	6.2 Ssh to Jenkins copy path of all java version "ls /usr/lib/jvm"
	6.3 Add JDK
		6.3.1 OracleJDK8
			/usr/lib/jvm/java-8-openjdk-amd64
		6.3.2 OracleJDK11
			/usr/lib/jvm/java-11-openjdk-amd64
		6.3.3 OracleJDK17
			/usr/lib/jvm/java-17-openjdk-amd64
	6.4 Add Maven
		MAVEN3 - 3.9.5
	6.5 Add Nexus Credential in Jenkins
		6.5.1 Jenkins -> Credentials -> username,Password and ID(nexuslogin)
	6.6 Write PipelineCode
		pipeline{
			agent any
			tools{
				maven "MAVEN3"
				jdk "OracleJDK8"
			}
			environment{
				NEXUS_LOGIN = 'nexuslogin'
				NEXUSIP = '172.31.27.32' // Nexus EC2 Private IP
				NEXUSPORT = '8081'
				NEXUS_USER = 'admin'
				NEXUS_PASS = 'admin'
				CENTRAL_REPO = 'vpro-maven-central'
				RELEASE_REPO = 'vprofile-release'
				SNAP_REPO = 'vprofile-snapshot'
				NEXUS_GRP_REPO = 'vpro-maven-group'
				SONARSERVER = 'sonarserver'
				SONARSCANNER = 'sonarscanner'
			}
			stages{
				stage('Build'){
					steps{
						//dir('P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins'){
							sh 'mvn -s settings.xml -DskipTests install'
						//}
					}
					post{
						success{
							echo "Archiving...."
							archiveArtifacts artifacts: 'P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins/target/*war'
						}
					}
				}
				stage('Test'){
					steps{
						//dir('P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins'){
							sh 'mvn -s settings.xml test'
						//}
					}
				}
				stage('Checkstyle Analysis'){
					steps{
						//dir('P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins'){
							sh 'mvn -s settings.xml checkstyle:checkstyle'
						//}
					}
				}
				stage('Sonar Analysis') {
					environment {
						scannerHome = tool "${SONARSCANNER}"
					}
					steps {
					   withSonarQubeEnv("${SONARSERVER}") {
						   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
						   -Dsonar.projectName=vprofile \
						   -Dsonar.projectVersion=1.0 \
						   -Dsonar.sources=src/ \
						   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
						   -Dsonar.junit.reportsPath=target/surefire-reports/ \
						   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
						   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
					  }
					}
				}
				stage("Quality Gate") {
					steps {
						timeout(time: 1, unit: 'HOURS') {
							// Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
							// true = set pipeline to UNSTABLE, false = don't
							waitForQualityGate abortPipeline: true
						}
					}
				}
				stage("UploadArtifact"){
					steps{
						nexusArtifactUploader(
						  nexusVersion: 'nexus3',
						  protocol: 'http',
						  nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
						  groupId: 'QA',
						  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
						  repository: "${RELEASE_REPO}",
						  credentialsId: "${NEXUS_LOGIN}",
						  artifacts: [
							[artifactId: 'vproapp',
							 classifier: '',
							 file: 'target/vprofile-v2.war',
							 type: 'war']
						  ]
						)
					}
				}
			}
			post {
				always {
					echo 'Slack Notifications.'
					slackSend channel: '#jenkinscicd',
						color: COLOR_MAP[currentBuild.currentResult],
						message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
				}
			}
		}
		6.6.1 Commit and push the code in Git
		6.6.2 Create job in jenkins
			6.6.2.1 Name: vprofile-ci-pipeline
			6.6.2.2 Pipeline script from SCM
				id = githublogin
				kind = SSH user with private key
				username = id
				paste private key "ssh-keygen"
			6.6.2.3 SSh to jenkins EC2 
				su - jenkins
				git ls-remote -h <git repo ssh url> HEAD  // will reomve repository url error from the jenkins
			6.6.2.4 Script Path and Branch
		6.6.3 Build the job.
7. GitHub Webhook
	7.1 Open Github -> Repository Setting -> Webhook and add "http://<Jenkins IP>:8080/github-webhook/" -> application-json
	7.2 Open Jenkins -> project configuration -> Enable GitHub hook trigger for GITScm polling
8. Sonarqube server integration stage
	8.1 Open Jenkins -> Manage Jenkins -> System
	8.2 Add Sonar details
		8.2.1 Name: sonarserver //Environment Name
		8.2.2 url: http://<IP> //Private IP of Sonar EC2 Instance
		8.2.3 Open Sonar Account -> Security -> Generate Token "4	4d704bdd8a0f4b9115779abbbfffa90664ea904"
	    8.2.4 Add Token and select -> Save	
		8.2.5 Manage Jenkins -> Tools -> SonarQube Scanner (sonarscanner)
		8.2.6 Setup quality gates
			8.2.6.1 Quality gate -> Bugs > 25
			8.2.6.2 Attach the quality gates with project.
		8.2.7 Create Webhook to communicate with jenkins	
			8.2.7.1 Go to Project Setting
			8.2.7.2 Name: jenkinswebhook
			8.2.7.3 http://<Private Jenkins IP>:8080/sonarqube-webhook
		8.2.8 Commit code into github -> SonarQube communicate regarding quality gate if error occurs > 25 it will abort the job.
9. Nexus Artifact upload stage
	9.1 Open Jenkins -> System -> Build Timestamp
	9.2 Edit Pipeline Code with Upload Artifact.
	9.3 Commit and push -> Jenkins build Job trigger and artifact store in Nexus.

10. Slack Notification
	10.1 sign-in in Slack
	10.2 Create workspace (vprofile-cicd-notify)
	10.3 Create channel (jenkinscicd)
	10.4 Add app to jenkins account
		10.4.1 Search Slack app in jenkins in browser
		10.4.2 Add to slack
		10.4.3 Add jenkinscicd channel 
		10.4.4 copy step3 Integration token credential id "CEWytVmF4BhKXeol4RyIBOFl"
	10.5 Open Jenkins -> Manage Jenkins -> Tools -> Slack
		10.5.1 workspace name vprofilecicd
		10.5.2 paste secreat key
		10.5.3 slacktoken
	10.6 Modify Pipeline Code
	10.7 Commit and Push
	10.8 Jenkins Build Job automatically
	10.9 Success/Failure notification received in Slack.

	