pipeline{
	agent any
	tools{
		maven "MAVEN3"
		jdk "OracleJDK8"
	}
	environment{
		NEXUS_LOGIN = 'nexuslogin'
		NEXUSIP = '172.31.27.32' // Nexus EC2 Private IP
		NEXUSPORT = '8081'
		NEXUS_USER = 'admin'
		NEXUS_PASS = 'admin'
		CENTRAL_REPO = 'vpro-maven-central'
		RELEASE_REPO = 'vprofile-release'
		SNAP_REPO = 'vprofile-snapshot'
		NEXUS_GRP_REPO = 'vpro-maven-group'
		SONARSERVER = 'sonarserver'
		SONARSCANNER = 'sonarscanner'
	}
	stages{
		stage('Build'){
			steps{
				//dir('P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins'){
					sh 'mvn -s settings.xml -DskipTests install'
				//}
			}
			post{
				success{
					echo "Archiving...."
					archiveArtifacts artifacts: 'P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins/target/*war'
				}
			}
		}
		stage('Test'){
			steps{
				//dir('P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins'){
					sh 'mvn -s settings.xml test'
				//}
			}
		}
		stage('Checkstyle Analysis'){
			steps{
				//dir('P7-Continuous-Integration-using-Jenkins-Sonarqube-Nexus-Slack/vprofile-project-ci-jenkins'){
					sh 'mvn -s settings.xml checkstyle:checkstyle'
				//}
			}
		}
		stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
               withSonarQubeEnv("${SONARSERVER}") {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }
		stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
		stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: "${RELEASE_REPO}",
                  credentialsId: "${NEXUS_LOGIN}",
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
                  ]
                )
            }
        }
	}
	post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}