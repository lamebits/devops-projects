1. Bitbucket
	1.1 Create account and repository on Bitbucket.
		1.1.1 Create workspace - cicd-on-aws-13
		1.1.2 Project Name - vprofile
		1.1.3 Repository Name - vprofile-cicd-project
	1.2 SSH authentication from local to bitbucket account.
		1.2.1 Open Git Bash
		1.2.2 cd ~/.ssh/
		1.2.3 ssh-keygen -t rsa
		1.2.4 Name key - bitbucket
		1.2.5 cat bitbucket.pub
		1.2.6 copy public key 
		1.2.7 Goto Bitbucket -> Personal bitbucket settings -> SSH Keys -> add copied public key with name "vpro-bit-key"
		1.2.8 vim config
				# bitbucket.org
				Host bitbucket.org
				 PreferredAuthentications publickey
				 IdentityFile ~/.ssh/bitbucket
		Note: Keyname and config name should be same
		1.2.9 ssh -T git@bitbucket.org 			//Connect git to bitbucket
	1.3 Migrate vprofile project source code from github to bitbucket
		1.3.1 mkdir awscicd
		1.3.2 git clone https://github.com/hkhcoder/vprofile-project.git
		1.3.3 cd vprofile-project
		1.3.4 ls -a
		1.3.5 cat .git/config
					[core]
					repositoryformatversion = 0
					filemode = false
					bare = false
					logallrefupdates = true
					symlinks = false
					ignorecase = true
				<!---[remote "origin"]
					url = https://github.com/hkhcoder/vprofile-project.git
					fetch = +refs/heads/*:refs/remotes/origin/*
				[branch "main"]
					remote = origin
					merge = refs/heads/main---> //remote git details
		1.3.6 git branch -a
		1.3.7 for i in `git branch -a | grep remotes | grep -v HEAD | cut -d / -f3`; do git checkout $i;done
		1.3.8 git fetch --tags
		1.3.9 git remote rm origin 		// remove git details form config file
		1.3.10 cat .git/config 
		1.3.11 Copy bitbucket repository SSH "git@bitbucket.org:cicd-on-aws-13/vprofile-cicd-project.git"
		1.3.12 git remote add origin <copied SSH url>.
		1.3.13 cat .git/config 		// verify bitbucket details added. 
		1.3.14 git push origin --all 		// push all git branches and data into bitbucket.
2. AWS Code Artifact
	2.1 Create code artifact repository
		2.1.1 Name - vprofile-maven-repo
		2.1.2 Public Upstream Repository - maven-central-store
		2.1.3 Select "This AWS account"
		2.1.4 DomainName - awsdevops
	2.2 Look at the settings for pom.xml & settings.xml for ci-aws branch// all the code artifact connection details are mentioned.
	2.3 Understand buildspec.yml file for code analysis build job	// build_buildspec.yml and sonar_buildspec.yml 
3. Sonar Cloud setup
	3.1 SonarCloud login using Github.
	3.2 My account -> security -> Generate Keyname	
		3.2.1 Name - vpro-sonar-cloud
		3.2.2 Copy that token   //408e1b968e33e35af704003118338fd3376aaa5c
		3.2.3 Create Organisation - awsvpro
		3.2.4 Create Project - awsvpro-project
		3.2.5 Project Key - awsvpro-project
		3.2.6 url : https://sonarcloud.io	
4. Parameter store
	4.1 Store sonar cloud details into parameter store.
		4.1.1 Goto AWS System Manager
			4.1.1.1 Go to Parameter Store in AWS System Manager
			4.1.1.2 Create Parameter
	4.2 Mention parameter store details in buildspec.yml file
		4.2.1 LOGIN : 408e1b968e33-------18338fd3376aaa5c
		4.2.2 HOST : https://sonarcloud.io
		4.2.3 Organisation: awsvpro
		4.2.4 Project : awsvpro-project
		sonar_buildspec.yml
		env:
		  parameter-store:
			LOGIN: LOGIN
			HOST: HOST
			Organization: Organization
			Project: Project
			
5. AWS Code Build for SonarQube
	5.1 Open AWS CodeArtifact.
	5.2 Select maven-central-store
	5.3 Click View connection Instructions
		5.3.1 Select Mac or Linux and mvn.
		5.3.2 Copy url mentioned for settings.xml file and paste it into codeartifact section of Pom.yml and settings.xml
		5.3.3 Copy Code Artifact Authorization token into runtime-versions section of Sonar_buildspac.yml file and rename the file into buildspac.yml and kept it into where pom.xml and settings.xml files are present.
	5.4 open git bash on vprofile-project folder 
		5.4.1 git add .
		5.4.2 git commit -m ""
		5.4.3 git push origin ci-aws
	5.5 It will push the code into bitbucket.
	5.2 Open AWS Code Build
		5.2.1 Project Name - vpro-code-analysis
		5.2.2 Source - Bitbucket
		5.2.3 OAuth App for bitbucket connection[vprofile-bitbucket-connection]
		5.2.4 Bitbucket Repository - https://bitbucket.org/meenalmate1663/vprofile-cicd-project.git
		5.2.5 Mention branch name - ci-aws in source-versions
		5.2.6 Operating System - Ubuntu
		5.2.7 Select "Use buildspec.yml file"
		5.2.8 CloudWatch
			5.2.8.1 GroupName : vprofile-ohio-codebuild
			5.2.8.2 Stream name - sonarCodeAnalysis
		5.2.9 Create build project
		5.2.10 Assign permission to Role "codebuild13-vpro-code-analysis-service-role" using IAM for accessing Parameter Store Variable.
		5.2.11 Open IAM -> Create Policy -> Select System Manager
			5.2.11.1 List: Select DescribeParameters
			5.2.11.2 Read: DescribeDocumentParameters,GetParameter,GetParameterHistory, GetParameters, GetParametersByPath
		5.2.12 PolicyName - vprofile-parametersReadPermission
		5.2.13 Assign Policy "vprofile-parametersReadPermission" & "AWSCodeArtifactReadOnlyAccess" to Role.
		5.2.14 Start build form CodeBuild.
		
6. AWS Code Build for Artifact
	6.1 Understand buildspec.yml file
		6.1.1 Open Code Artifact -> View Connection Instructions
		6.1.2 Copy Code Artifact Authorization token into build_buildspec.yml file
		6.1.3 open git bash on vprofile-project folder 
			6.1.1 git add .
			6.1.2 git commit -m ""
			6.1.3 git push origin ci-aws
	6.2 Open AWS Code Build
		6.2.1 Project Name - vprofile-build-artifact
		6.2.2 Source - Bitbucket
		6.2.3 OAuth App for bitbucket connection[vprofile-bitbucket-connection]
		6.2.4 Bitbucket Repository - https://bitbucket.org/meenalmate1663/vprofile-cicd-project.git
		6.2.5 Mention branch name - ci-aws in source-versions
		6.2.6 Operating System - Ubuntu
		6.2.7 Select "Use buildspec.yml file" - Path aws-files/build_buildspec.yml
		6.2.8 CloudWatch
			6.2.8.1 GroupName : vprofile-ohio-codebuild
			6.2.8.2 Stream name - sonarCodeAnalysis
		6.2.9 Create build project
		6.2.10 Assign permission to Role "codebuild14-vprofile-build-artifact-service-role" using IAM for accessing Parameter Store Variable.
		6.2.11 Open IAM
		6.2.12 Assign Policy "AWSCodeArtifactReadOnlyAccess" to Role.
		6.2.13 Start build form CodeBuild.
	6.3 Create S3 Bucket
		6.3.1 BucketName - vprofile13-build-artifact
		6.3.2 FolderName - pipeline-artifact

7. Code Pipeline
	7.1 Create SNS notifications
		7.1 Select Standard
		7.2 Name - vprofile-pipeline-notifications
		7.3 Create Subcription for email notifications
		7.4 Check Email for confirmation
	7.2 Create AWS CodePipeline
		7.2.1 Create Pipeline Name - vprofile-build-pipeline
		7.2.2 Source Provider - Bitbucket
			7.2.2.1 Connetion, Repository and branch name
		7.2.3 Other build provider - AWS CodeBuild
		7.2.4 ProjectName - Select vprofile-build-artifact
		7.2.5 Create Pipeline
		7.2.6 Stop Execution
		7.2.7 Add Stage before Build for Pipeline	
			7.2.7.1 Add stages for sonarCodeAnalysis -> AWS CodeBuild -> Select vpro-code-analysis->Done
		7.2.8 Add stage for S3 Deploy
			7.2.8.1 Add stages for S3 Deploy -> DeployToS3 -> Amazon S3 -> Select Input Artifact(BuildArtifact) -> S3 Object Key(pipeline-artifact(Bucket foldername))-> Extract before deploy->done
	7.3 Pipeline Notification Setting
		7.3.1 Goto Pipeline settins -> notification -> create notifications rule
		7.3.2 Select event trigger notifications
		7.3.3 Choose target(SNS notification) - vprofile-pipeline-notifications
		7.3.4 Go to Pipeline and click on ReleaseChange
8. Commit and push the code then automatically CodePipeline will trigger.
