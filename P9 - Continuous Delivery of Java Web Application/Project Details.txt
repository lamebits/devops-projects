1. Update github webhook with new Jenkins IP
	1.1 Go to github
	1.2 vprofile-project-ci repository
	1.3 Repo settings -> webhook -> add "http://<jenkins-publicip>:8080/github-webhook/"
	
2. Copy Docker files from vprofile repo to our repo
	2.1 Clone "git clone https://github.com/lamebits/vprofile-project-ci.git"
	2.2 Download  Zip "https://github.com/devopshydclub/vprofile-project.git" from docker branch
	2.3 Copy Docker-files folder into vprofile-project-ci folder
	2.4 git checkout ci-jenkins			// Switch to ci-jenkins branch
	2.5 git checkout -b cicd-jenkins	// Create cicd-jenkins new branch

3. Prepare two separate Jenkinsfile for staging & prod in source code
	3.1 Create two folders "StagePipeline" & "ProdPipeline"
	3.2 Copy Jenkinsfile in above two folders and delete Jenkinsfile using command "git rm Jenkinsfile"
	3.3 Validate
		$ cat .git/config
		[core]
			repositoryformatversion = 0
			filemode = false
			bare = false
			logallrefupdates = true
			symlinks = false
			ignorecase = true
		[remote "origin"]
			url = https://github.com/lamebits/vprofile-project-ci.git
			fetch = +refs/heads/*:refs/remotes/origin/*
		[branch "main"]
			remote = origin
			merge = refs/heads/main
		[branch "ci-jenkins"]
			remote = origin
			merge = refs/heads/ci-jenkins
	3.4 git add .
	3.5 git commit -m "Preparing cicd-jenkins branch"
	3.6 git push origin cicd-branch
	
4. AWS steps
	4.1 Create IAM user
		4.1.1 Name : cicdjenkins
		4.1.2 Permissions: AmazonEC2ContainerRegistryFullAccess, AmazonECS_FullAccess
	4.2 Create ECR
		4.2.1 Name: vprofileappimg
	
5. Jenkins setps
	5.1 Install plugins
		a. Docker Pipeline
		b. CloudBees Docker Build and Publish
		c. Amazon ECR
		d . Pipeline: aws steps
	5.2 Add AWS credentials in Jenkins
		a. Copy IAM user accesskey and secretkey and paste it into jenkins manage credentials with name awscreds in AWS credential setting.

6. Install docker engine & awscli on jenkins
	6.1 Login Jenkins SSH
		6.1.1 ssh -i <key.pem> ubuntu@<jenkins-public-ip>
		6.1.2 sudo -i
		6.1.3 apt update && apt install awscli
			# Add Docker's official GPG key:
			sudo apt-get update
			sudo apt-get install ca-certificates curl
			sudo install -m 0755 -d /etc/apt/keyrings
			sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
			sudo chmod a+r /etc/apt/keyrings/docker.asc

			# Add the repository to Apt sources:
			echo \
			  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
			  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
			  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
			sudo apt-get update
				
			sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
				
			sudo docker run hello-world
	6.2 Add Jenkins user to docker
		6.2.1 usermod -aG docker jenkins
		6.2.2 systemctl restart jenkins

7. Write Jenkinsfile for Build & Publish image to ECR
	7.1 Add parameters in StagePipeline Jenkinsfiles
		7.1.1 environment{
			----
			registryCredential = 'ecr:us-east-2:awscreds' // ecr:<region-name>:jenkins aws creds name
			appRegistry = '022499024066.dkr.ecr.us-east-2.amazonaws.com/vprofileappimg' // URI of AWS ECR
			vprofileregistry = 'https://022499024066.dkr.ecr.us-east-2.amazonaws.com'
		}
		7.1.2 Add Docker Build and Upload Code in StagePipeline Jenkinsfile
			stage("Docker Build Image"){
            steps{
                script{
                    dockerImage = docker.build(appRegistry+":$BUILD_NUMBER","Docker-files/app/multistage")       
                }
            }
        
			stage("Docker Upload App Image"){
				steps{
					script{
						docker.withRegistry(vprofileregistry,registryCredential){
								dockerImage.push("$BUILD_NUMBER")
								dockerImage.push("latest")
						}
					}
				}
			}
		7.1.3 git add .
		7.1.4 git commit -m "Docker Build and Upload to ECR"
		7.1.5 git push origin cicd-jenkins
	7.2 Create New Job in Jenkins 
		7.2.1 Name : viprofile-cicd-docker
		7.2.2 Enable - GitHub hook trigger for GITScm polling
		7.2.3 Select Pipeline Script from sCM
			7.2.3.1 SCM - Git
			7.2.3.2 Repositry URL - git@github.com:lamebits/vprofile-project-ci.git
			7.2.3.3 Credential - githublogin
			7.2.3.4 Branch - */cicd-jenkins
			7.2.3.5 ScriptPath - StagePipeline/Jenkinsfile
		7.2.4 Commit and Push the code and test it.
8. ECS Setup
	Cluster, Task Definition, Service
	8.1 Create Staging Cluster	
		8.1.1 Name: vprostaging
	8.2 Create Task Defination
		8.2.1 Name: vproappstagetask
		8.2.2 Copy ECR URL and paste Imageuri
		8.2.3 Name of conainer: vproapp
		8.2.4 Port: 8080
		8.2.5 Created
	8.3 Create Service/Deploy
		8.3.1 Select Cluster -> Service -> Create
		8.3.2 Select Launch Type
		8.3.3 Select Task Defination(vproappstagetask)
		8.3.4 ServiceName: vproappstagesv
		8.3.5 Create Security Group(vproappstagesg) -> 8080 -> Anywhere
		8.3.6 Load Balancing: Application Load Balancer -> Create New Load Balancer(vproappstageelb) -> Health Check Period:30
		8.3.7 Target group : Name(vproappstagetg):Health Check Path: /login
	8.4 Goto EC2 Instance TargetGroup
		8.4.1 Select TargetGroup(vproappstagetg)
		8.4.2 Goto Health Check -> Advance Health Check setting -> Health check port -> Override -> 8080
	8.5 Goto EC2 Instance SecurityGroup(vproappstagesg)
		8.5.1 HTTP -> TCP -> 80 -> IPV4
		8.5.2 HTTP -> TCP -> 80 -> IPV6
		8.5.3 Custom TCP -> 8080 -> IPV4
		8.5.4 Customer TCP -> 8080 -> TPV6
	8.6 Goto ECS -> Networking Configuration -> DNS Name  
9. Code for Deploy Docker Image to ECS
	9.1 Add environment variable
		environment{
			---
			cluster = "vprostaging"
			service = "vproappstagesv"
		}
	9.2 Deploy Docker Image of ECR to ECS
		Add Code in StagePipeline Jenkinsfile
		stage("Deploy to ECS Staging"){
            steps{
                withAWS(credentials: 'awscreds', region: 'us-east-2'){
                    sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                }
            }
        }
	9.3 git add .
	9.4 git commit -m "Deploy to ECS"
	9.5 git push origin cicd-jenkins
	9.6 it will build the job in jenkins
10. Repeat the steps 8 to 9 for prod ECS cluster
11. Promoting docker image for prod.
	11.1 Create new branch in git name cicd-prod-jenkins
		-> git checkout -b cicd-prod-jenkins
	11.2 ProdPipeline Jenkinsfile
		pipeline{
			agent any
			environment{
				cluster = "vproprod" 
				service = "vproappprodsv"
			}
			stages{
				stage("Deploy to Prod ECS Staging"){
					steps{
						withAWS(credentials: 'awscreds', region: 'us-east-2'){
							sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
						}
					}
				}
			}
			post {
				always {
					echo 'Slack Notifications.'
					slackSend channel: '#jenkinscicd-v2',
						color: COLOR_MAP[currentBuild.currentResult],
						message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
				}
			}
		
		}
	11.3 Create New Jenkins Pipeline for Production (viprofile-cicd-docker) same as staging jenkins pipeline
		11.3.1 Change BranchName and Jenkinsfile path.
		11.3.2 git add .
		11.3.3 git commit -m "Deploy to Prod ECS"
		11.3.4 git push origin cicd-prod-jenkins
	11.4 After approval
		11.4.1 git merge cicd-jenkins to cicd-prod-jenkins using command 
			-> git checkout cicd-prod-jenkins
			-> git merge cicd-jenkins
	11.5 Push code in github
		11.5.1 git add .
		11.5.2 git commit -m "Deploy to Prod ECS"
		11.5.3 git push origin cicd-prod-jenkins